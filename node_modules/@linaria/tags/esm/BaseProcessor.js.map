{"version":3,"file":"BaseProcessor.js","names":["generator","getClassNameAndSlug","hasMeta","isCSSable","validateParams","BaseProcessor","SKIP","Symbol","artifacts","dependencies","interpolations","constructor","params","tagSource","astService","location","replacer","displayName","isReferenced","idx","options","context","className","slug","callee","isValidValue","value","tagSourceCode","type","name","code","toString"],"sources":["../src/BaseProcessor.ts"],"sourcesContent":["/* eslint-disable class-methods-use-this */\nimport type { types as t } from '@babel/core';\nimport generator from '@babel/generator';\nimport type {\n  Expression,\n  Identifier,\n  SourceLocation,\n  MemberExpression,\n} from '@babel/types';\n\nimport type {\n  ExpressionValue,\n  IInterpolation,\n  Params,\n  Value,\n  ValueCache,\n  Artifact,\n} from './types';\nimport getClassNameAndSlug from './utils/getClassNameAndSlug';\nimport hasMeta from './utils/hasMeta';\nimport { isCSSable } from './utils/toCSS';\nimport type { IFileContext, IOptions } from './utils/types';\nimport { validateParams } from './utils/validateParams';\n\nexport { Expression };\n\nexport type ProcessorParams = ConstructorParameters<typeof BaseProcessor>;\nexport type TailProcessorParams = ProcessorParams extends [Params, ...infer T]\n  ? T\n  : never;\n\nexport type TagSource = {\n  imported: string;\n  source: string;\n};\n\nexport default abstract class BaseProcessor {\n  public static SKIP = Symbol('skip');\n\n  public readonly artifacts: Artifact[] = [];\n\n  public readonly className: string;\n\n  public readonly dependencies: ExpressionValue[] = [];\n\n  public interpolations: IInterpolation[] = [];\n\n  public readonly slug: string;\n\n  protected callee: Identifier | MemberExpression;\n\n  protected evaluated:\n    | Record<'dependencies' | 'expression', Value[]>\n    | undefined;\n\n  public constructor(\n    params: Params,\n    public tagSource: TagSource,\n    protected readonly astService: typeof t & {\n      addDefaultImport: (source: string, nameHint?: string) => Identifier;\n      addNamedImport: (\n        name: string,\n        source: string,\n        nameHint?: string\n      ) => Identifier;\n    },\n    public readonly location: SourceLocation | null,\n    protected readonly replacer: (\n      replacement: Expression,\n      isPure: boolean\n    ) => void,\n    public readonly displayName: string,\n    public readonly isReferenced: boolean,\n    protected readonly idx: number,\n    protected readonly options: IOptions,\n    protected readonly context: IFileContext\n  ) {\n    validateParams(\n      params,\n      ['callee'],\n      'Unknown error: a callee param is not specified'\n    );\n\n    const { className, slug } = getClassNameAndSlug(\n      this.displayName,\n      this.idx,\n      this.options,\n      this.context\n    );\n\n    this.className = className;\n    this.slug = slug;\n\n    [[, this.callee]] = params;\n  }\n\n  public abstract build(values: ValueCache): void;\n\n  public isValidValue(value: unknown): value is Value {\n    return typeof value === 'function' || isCSSable(value) || hasMeta(value);\n  }\n\n  /**\n   * Perform a replacement for the tag in evaluation time.\n   * For example, `css` tag will be replaced with its className,\n   * whereas `styled` tag will be replaced with an object with metadata.\n   */\n  public abstract doEvaltimeReplacement(): void;\n\n  /**\n   * Perform a replacement for the tag with its runtime version.\n   * For example, `css` tag will be replaced with its className,\n   * whereas `styled` tag will be replaced with a component.\n   * If some parts require evaluated data for render,\n   * they will be replaced with placeholders.\n   */\n  public abstract doRuntimeReplacement(): void;\n\n  /**\n   * A replacement for tag referenced in a template literal.\n   */\n  public abstract get asSelector(): string;\n\n  /**\n   * A replacement for the tag in evaluation time.\n   * For example, `css` tag will be replaced with its className,\n   * whereas `styled` tag will be replaced with an object with metadata.\n   */\n  public abstract get value(): Expression;\n\n  protected tagSourceCode(): string {\n    if (this.callee.type === 'Identifier') {\n      return this.callee.name;\n    }\n\n    return generator(this.callee).code;\n  }\n\n  public toString(): string {\n    return this.tagSourceCode();\n  }\n}\n"],"mappings":"AAAA;;AAEA,OAAOA,SAAS,MAAM,kBAAkB;AAgBxC,OAAOC,mBAAmB,MAAM,6BAA6B;AAC7D,OAAOC,OAAO,MAAM,iBAAiB;AACrC,SAASC,SAAS,QAAQ,eAAe;AAEzC,SAASC,cAAc,QAAQ,wBAAwB;AAcvD,eAAe,MAAeC,aAAa,CAAC;EAC1C,OAAcC,IAAI,GAAGC,MAAM,CAAC,MAAM,CAAC;EAEnBC,SAAS,GAAe,EAAE;EAI1BC,YAAY,GAAsB,EAAE;EAE7CC,cAAc,GAAqB,EAAE;EAUrCC,WAAW,CAChBC,MAAc,EACPC,SAAoB,EACRC,UAOlB,EACeC,QAA+B,EAC5BC,QAGV,EACOC,WAAmB,EACnBC,YAAqB,EAClBC,GAAW,EACXC,OAAiB,EACjBC,OAAqB,EACxC;IAAA,KAnBOR,SAAoB,GAApBA,SAAoB;IAAA,KACRC,UAOlB,GAPkBA,UAOlB;IAAA,KACeC,QAA+B,GAA/BA,QAA+B;IAAA,KAC5BC,QAGV,GAHUA,QAGV;IAAA,KACOC,WAAmB,GAAnBA,WAAmB;IAAA,KACnBC,YAAqB,GAArBA,YAAqB;IAAA,KAClBC,GAAW,GAAXA,GAAW;IAAA,KACXC,OAAiB,GAAjBA,OAAiB;IAAA,KACjBC,OAAqB,GAArBA,OAAqB;IAExCjB,cAAc,CACZQ,MAAM,EACN,CAAC,QAAQ,CAAC,EACV,gDAAgD,CACjD;IAED,MAAM;MAAEU,SAAS;MAAEC;IAAK,CAAC,GAAGtB,mBAAmB,CAC7C,IAAI,CAACgB,WAAW,EAChB,IAAI,CAACE,GAAG,EACR,IAAI,CAACC,OAAO,EACZ,IAAI,CAACC,OAAO,CACb;IAED,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,IAAI,GAAGA,IAAI;IAEhB,CAAC,GAAG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGZ,MAAM;EAC5B;EAIOa,YAAY,CAACC,KAAc,EAAkB;IAClD,OAAO,OAAOA,KAAK,KAAK,UAAU,IAAIvB,SAAS,CAACuB,KAAK,CAAC,IAAIxB,OAAO,CAACwB,KAAK,CAAC;EAC1E;;EAEA;AACF;AACA;AACA;AACA;;EAwBYC,aAAa,GAAW;IAChC,IAAI,IAAI,CAACH,MAAM,CAACI,IAAI,KAAK,YAAY,EAAE;MACrC,OAAO,IAAI,CAACJ,MAAM,CAACK,IAAI;IACzB;IAEA,OAAO7B,SAAS,CAAC,IAAI,CAACwB,MAAM,CAAC,CAACM,IAAI;EACpC;EAEOC,QAAQ,GAAW;IACxB,OAAO,IAAI,CAACJ,aAAa,EAAE;EAC7B;AACF"}