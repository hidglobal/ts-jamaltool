{"version":3,"file":"scopeHelpers.js","names":["NODE_FIELDS","findIdentifiers","nonType","getScope","isNotNull","isRemoved","validateField","node","key","val","field","validate","optional","getBinding","path","binding","name","undefined","reference","referencePath","force","isReferencedIdentifier","referencePaths","includes","referenced","references","push","isReferenced","kind","some","i","find","ancestor","isTSType","isFlowType","dereference","filter","length","dereferenceAll","map","identifierPath","referenceAll","forEach","deletingNodes","WeakSet","isEmptyList","list","every","has","getPathFromAction","action","Array","isArray","Error","canFunctionBeDelete","fnPath","fnScope","scope","parentScope","parent","listKey","findActionForNode","add","parentPath","isProgram","isFunction","isBlockStatement","get","async","body","type","directives","generator","params","isLogicalExpression","operator","value","isObjectProperty","isIdentifier","maybeDefineProperty","isCallExpression","matchesPattern","isTemplateLiteral","isAssignmentExpression","isForInStatement","left","isFunctionExpression","isFunctionDeclaration","isObjectMethod","isClassMethod","prevStatement","isIfStatement","isReturnStatement","slice","statement","isVariableDeclarator","isExportNamedDeclaration","declaration","isTryStatement","referenceEnums","program","traverse","ExpressionStatement","expressionStatement","expression","callee","args","arg","fixed","removeUnreferenced","items","Set","item","hasReferences","forDeleting","constantViolations","identifier","removeWithRelated","result","sort","a","b","localeCompare","applyAction","mutate","p","remove","replaceWith","paths","rootPath","getProgramParent","actions","affectedPaths","referencedIdentifiers","referencesOfBinding","reduce","acc","clean","join","fn","dereferenced","mutated","dead","assignments","assignment","declared","Object","values","getOuterBindingIdentifiers","Identifier","isArrayPattern","elements"],"sources":["../src/scopeHelpers.ts"],"sourcesContent":["/* eslint-disable no-restricted-syntax */\n/* eslint @typescript-eslint/no-use-before-define: [\"error\", { \"functions\": false }] */\n\nimport type { Binding, NodePath } from '@babel/traverse';\nimport type {\n  FieldOptions,\n  Function as FunctionNode,\n  Identifier,\n  JSXIdentifier,\n  Node,\n  Program,\n} from '@babel/types';\nimport { NODE_FIELDS } from '@babel/types';\n\nimport findIdentifiers, { nonType } from './findIdentifiers';\nimport { getScope } from './getScope';\nimport isNotNull from './isNotNull';\nimport isRemoved from './isRemoved';\n\nfunction validateField(\n  node: Node,\n  key: string,\n  val: unknown,\n  field: FieldOptions\n) {\n  if (!(field != null && field.validate)) return true;\n  if (field.optional && val == null) return true;\n  try {\n    field.validate(node, key, val);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction getBinding(path: NodePath<Identifier | JSXIdentifier>) {\n  const binding = getScope(path).getBinding(path.node.name);\n  if (!binding) {\n    return undefined;\n  }\n\n  return binding;\n}\n\nexport function reference(\n  path: NodePath<Identifier | JSXIdentifier>,\n  referencePath: NodePath = path,\n  force = false\n): void {\n  if (!force && !path.isReferencedIdentifier()) return;\n\n  const binding = getBinding(path);\n  if (!binding) return;\n\n  if (binding.referencePaths.includes(referencePath)) {\n    return;\n  }\n\n  binding.referenced = true;\n  binding.references += 1;\n  binding.referencePaths.push(referencePath ?? path);\n}\n\nfunction isReferenced(binding: Binding) {\n  if (!binding.referenced) {\n    return false;\n  }\n\n  // If it's a param binding, we can't just remove it\n  // because it brakes the function signature. Keep it alive for now.\n  if ((binding.kind as string) === 'param') {\n    return true;\n  }\n\n  // If all remaining references are in TS/Flow types, binding is unreferenced\n  return binding.referencePaths.some(\n    (i) => !i.find((ancestor) => ancestor.isTSType() || ancestor.isFlowType())\n  );\n}\n\nexport function dereference(\n  path: NodePath<Identifier | JSXIdentifier>\n): Binding | null {\n  const binding = getBinding(path);\n  if (!binding) return null;\n\n  if (!binding.referencePaths.includes(path)) {\n    return null;\n  }\n\n  binding.references -= 1;\n  binding.referencePaths = binding.referencePaths.filter((i) => i !== path);\n  binding.referenced = binding.referencePaths.length > 0;\n\n  return binding;\n}\n\nfunction dereferenceAll(path: NodePath): Binding[] {\n  return findIdentifiers([path])\n    .map((identifierPath) => dereference(identifierPath))\n    .filter(isNotNull);\n}\n\nexport function referenceAll(path: NodePath): void {\n  findIdentifiers([path]).forEach((identifierPath) =>\n    reference(identifierPath)\n  );\n}\n\nconst deletingNodes = new WeakSet<NodePath>();\n\nconst isEmptyList = (list: NodePath[]) =>\n  list.length === 0 || list.every((i) => deletingNodes.has(i));\n\ntype ReplaceAction = [action: 'replace', what: NodePath, by: Node];\ntype RemoveAction = [action: 'remove', what: NodePath];\n\nconst getPathFromAction = (action: RemoveAction | ReplaceAction) => {\n  if (!Array.isArray(action)) {\n    return action;\n  }\n\n  if (action[0] === 'replace' || action[0] === 'remove') {\n    return action[1];\n  }\n\n  throw new Error(`Unknown action type: ${action[0]}`);\n};\n\nfunction canFunctionBeDelete(fnPath: NodePath<FunctionNode>) {\n  const fnScope = fnPath.scope;\n  const parentScope = fnScope.parent;\n  if (parentScope.parent) {\n    // It isn't a top-level function, so we can't delete it\n    return true;\n  }\n\n  if (fnPath.listKey === 'arguments') {\n    // It is passed as an argument to another function, we can't delete it\n    return true;\n  }\n\n  return false;\n}\n\nexport function findActionForNode(\n  path: NodePath\n): RemoveAction | ReplaceAction | null {\n  if (isRemoved(path)) return null;\n\n  deletingNodes.add(path);\n\n  const parent = path.parentPath;\n\n  if (!parent) return ['remove', path];\n\n  if (parent.isProgram()) {\n    // Do not delete Program node\n    return ['remove', path];\n  }\n\n  if (parent.isFunction()) {\n    if (path.listKey === 'params') {\n      // Do not remove params of functions\n      return null;\n    }\n\n    if (\n      (path.isBlockStatement() && isEmptyList(path.get('body'))) ||\n      path === parent.get('body')\n    ) {\n      if (!canFunctionBeDelete(parent)) {\n        return [\n          'replace',\n          parent,\n          {\n            ...parent.node,\n            async: false,\n            body: {\n              type: 'BlockStatement',\n              body: [],\n              directives: [],\n            },\n            generator: false,\n            params: [],\n          },\n        ];\n      }\n    }\n  }\n\n  if (parent.isLogicalExpression({ operator: '&&' })) {\n    return [\n      'replace',\n      parent,\n      {\n        type: 'BooleanLiteral',\n        value: false,\n      },\n    ];\n  }\n\n  if (parent.isObjectProperty()) {\n    // let's check if it is a special case with Object.defineProperty\n    const key = parent.get('key');\n    if (key.isIdentifier({ name: 'get' })) {\n      const maybeDefineProperty = parent.parentPath.parentPath;\n      if (\n        maybeDefineProperty?.isCallExpression() &&\n        maybeDefineProperty\n          .get('callee')\n          .matchesPattern('Object.defineProperty')\n      ) {\n        return findActionForNode(maybeDefineProperty);\n      }\n    }\n\n    return findActionForNode(parent);\n  }\n\n  if (parent.isTemplateLiteral()) {\n    return [\n      'replace',\n      path,\n      {\n        type: 'StringLiteral',\n        value: '',\n      },\n    ];\n  }\n\n  if (parent.isAssignmentExpression()) {\n    return findActionForNode(parent);\n  }\n\n  if (parent.isCallExpression()) {\n    return findActionForNode(parent);\n  }\n\n  if (parent.isForInStatement({ left: path.node })) {\n    return findActionForNode(parent);\n  }\n\n  if (\n    parent.isFunctionExpression({ body: path.node }) ||\n    parent.isFunctionDeclaration() ||\n    parent.isObjectMethod() ||\n    parent.isClassMethod()\n  ) {\n    return findActionForNode(parent);\n  }\n\n  if (parent.isBlockStatement()) {\n    const body = parent.get('body');\n    if (isEmptyList(body)) {\n      return findActionForNode(parent);\n    }\n\n    if (path.listKey === 'body' && typeof path.key === 'number') {\n      if (path.key > 0) {\n        // We can check whether the previous one can be removed\n        const prevStatement = body[path.key - 1];\n        if (\n          prevStatement.isIfStatement() &&\n          prevStatement.get('consequent').isReturnStatement()\n        ) {\n          // It's `if (…) return …`, we can remove it.\n          return findActionForNode(prevStatement);\n        }\n      } else if (\n        body.slice(1).every((statement) => deletingNodes.has(statement))\n      ) {\n        // If it is the first statement and all other statements\n        // are marked for deletion, we can remove the whole block.\n        return findActionForNode(parent);\n      }\n    }\n  }\n\n  if (parent.isVariableDeclarator()) {\n    return findActionForNode(parent);\n  }\n\n  if (\n    parent.isExportNamedDeclaration() &&\n    ((path.key === 'specifiers' && isEmptyList(parent.get('specifiers'))) ||\n      (path.key === 'declaration' && parent.node.declaration === path.node))\n  ) {\n    return findActionForNode(parent);\n  }\n\n  for (const key of ['body', 'declarations', 'specifiers']) {\n    if (path.listKey === key && typeof path.key === 'number') {\n      const list = parent.get(key) as NodePath[];\n      if (isEmptyList(list)) {\n        return findActionForNode(parent);\n      }\n    }\n  }\n\n  if (parent.isTryStatement()) {\n    return findActionForNode(parent);\n  }\n\n  if (!path.listKey) {\n    const field = NODE_FIELDS[parent.type][path.key];\n    if (!validateField(parent.node, path.key as string, null, field)) {\n      // The parent node isn't valid without this field, so we should remove it also.\n      return findActionForNode(parent);\n    }\n  }\n\n  for (const key of [\n    'argument',\n    'block',\n    'body',\n    'callee',\n    'discriminant',\n    'expression',\n    'id',\n    'left',\n    'object',\n    'property',\n    'right',\n    'test',\n  ]) {\n    if (path.key === key && parent.get(key) === path) {\n      return findActionForNode(parent);\n    }\n  }\n\n  return ['remove', path];\n}\n\n// @babel/preset-typescript transpiles enums, but doesn't reference used identifiers.\nfunction referenceEnums(program: NodePath<Program>) {\n  /*\n   * We are looking for transpiled enums.\n   *   (function (Colors) {\n   *     Colors[\"BLUE\"] = \"#27509A\";\n   *   })(Colors || (Colors = {}));\n   */\n  program.traverse({\n    ExpressionStatement(expressionStatement) {\n      const expression = expressionStatement.get('expression');\n      if (!expression.isCallExpression()) return;\n\n      const callee = expression.get('callee');\n      const args = expression.get('arguments');\n      if (!callee.isFunctionExpression() || args.length !== 1) return;\n      const [arg] = args;\n      if (arg.isLogicalExpression({ operator: '||' })) {\n        referenceAll(arg);\n      }\n    },\n  });\n}\n\nconst fixed = new WeakSet<NodePath<Program>>();\n\nfunction removeUnreferenced(items: NodePath<Identifier | JSXIdentifier>[]) {\n  const referenced = new Set<NodePath<Identifier | JSXIdentifier>>();\n  items.forEach((item) => {\n    if (!item.node || isRemoved(item)) return;\n    const binding = getScope(item).getBinding(item.node.name);\n    if (!binding) return;\n    const hasReferences =\n      binding.referencePaths.filter((i) => !isRemoved(i)).length > 0;\n    if (hasReferences) {\n      referenced.add(item);\n      return;\n    }\n\n    const forDeleting = [binding.path, ...binding.constantViolations]\n      .map(findActionForNode)\n      .filter(isNotNull)\n      .map(getPathFromAction);\n\n    if (forDeleting.length === 0) return;\n\n    findIdentifiers(forDeleting).forEach((identifier) => {\n      referenced.add(identifier);\n    });\n\n    removeWithRelated(forDeleting);\n  });\n\n  const result = [...referenced];\n  result.sort((a, b) => a.node?.name.localeCompare(b.node?.name));\n\n  return result;\n}\n\nfunction applyAction(action: ReplaceAction | RemoveAction) {\n  mutate(action[1], (p) => {\n    if (isRemoved(p)) return;\n\n    if (action[0] === 'remove') {\n      p.remove();\n    }\n\n    if (action[0] === 'replace') {\n      p.replaceWith(action[2]);\n    }\n  });\n}\n\nfunction removeWithRelated(paths: NodePath[]) {\n  if (paths.length === 0) return;\n\n  const rootPath = getScope(paths[0]).getProgramParent()\n    .path as NodePath<Program>;\n\n  if (!fixed.has(rootPath)) {\n    // Some libraries don't care about bindings, references, and other staff\n    // So we have to fix the scope before we can detect unused code\n    referenceEnums(rootPath);\n    fixed.add(rootPath);\n  }\n\n  const actions: (ReplaceAction | RemoveAction)[] = paths\n    .map(findActionForNode)\n    .filter(isNotNull);\n\n  const affectedPaths = actions.map(getPathFromAction);\n\n  let referencedIdentifiers = findIdentifiers(affectedPaths, 'referenced');\n  referencedIdentifiers.sort((a, b) =>\n    a.node?.name.localeCompare(b.node?.name)\n  );\n\n  const referencesOfBinding = findIdentifiers(affectedPaths, 'binding')\n    .map((i) => (i.node && getScope(i).getBinding(i.node.name)) ?? null)\n    .filter(isNotNull)\n    .reduce(\n      (acc, i) => [...acc, ...i.referencePaths.filter(nonType)],\n      [] as NodePath[]\n    );\n\n  actions.forEach(applyAction);\n\n  removeWithRelated(referencesOfBinding);\n\n  let clean = false;\n  while (!clean && referencedIdentifiers.length > 0) {\n    const referenced = removeUnreferenced(referencedIdentifiers);\n    clean =\n      referenced.map((i) => i.node?.name).join('|') ===\n      referencedIdentifiers.map((i) => i.node?.name).join('|');\n    referencedIdentifiers = referenced;\n  }\n}\n\nfunction mutate<T extends NodePath>(path: T, fn: (p: T) => NodePath[] | void) {\n  const dereferenced = dereferenceAll(path);\n\n  const mutated = fn(path);\n\n  referenceAll(path);\n  mutated?.forEach((p) => referenceAll(p));\n\n  const dead = dereferenced.filter((p) => !isReferenced(p));\n\n  const forDeleting: NodePath[] = [];\n  dead.forEach((binding) => {\n    const assignments = [binding.path, ...binding.constantViolations];\n    assignments.forEach((assignment) => {\n      const { scope } = assignment;\n      const declared = Object.values(\n        assignment.getOuterBindingIdentifiers(false)\n      );\n      if (\n        declared.length === 1 &&\n        'name' in declared[0] &&\n        declared[0].name === binding.identifier.name\n      ) {\n        // Only one identifier is declared, so we can remove the whole declaration\n        forDeleting.push(assignment);\n        return;\n      }\n\n      if (\n        declared.every(\n          (identifier) =>\n            identifier.type === 'Identifier' &&\n            !scope.getBinding(identifier.name)?.referenced\n        )\n      ) {\n        // No other identifier is referenced, so we can remove the whole declaration\n        forDeleting.push(assignment);\n        return;\n      }\n\n      // We can't remove the binding, but we can remove the part of it\n      assignment.traverse({\n        Identifier(identifier) {\n          if (identifier.node.name === binding.identifier.name) {\n            const parent = identifier.parentPath;\n            if (\n              parent.isArrayPattern() &&\n              identifier.listKey === 'elements' &&\n              typeof identifier.key === 'number'\n            ) {\n              parent.node.elements[identifier.key] = null;\n            } else if (parent.isObjectProperty()) {\n              forDeleting.push(parent);\n            }\n          }\n        },\n      });\n    });\n  });\n\n  removeWithRelated(forDeleting);\n}\n\nexport { applyAction, mutate, removeWithRelated };\n"],"mappings":"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"}