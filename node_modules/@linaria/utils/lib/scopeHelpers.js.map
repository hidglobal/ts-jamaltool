{"version":3,"file":"scopeHelpers.js","names":["validateField","node","key","val","field","validate","optional","getBinding","path","binding","getScope","name","undefined","reference","referencePath","force","isReferencedIdentifier","referencePaths","includes","referenced","references","push","isReferenced","kind","some","i","find","ancestor","isTSType","isFlowType","dereference","filter","length","dereferenceAll","findIdentifiers","map","identifierPath","isNotNull","referenceAll","forEach","deletingNodes","WeakSet","isEmptyList","list","every","has","getPathFromAction","action","Array","isArray","Error","canFunctionBeDelete","fnPath","fnScope","scope","parentScope","parent","listKey","findActionForNode","isRemoved","add","parentPath","isProgram","isFunction","isBlockStatement","get","async","body","type","directives","generator","params","isLogicalExpression","operator","value","isObjectProperty","isIdentifier","maybeDefineProperty","isCallExpression","matchesPattern","isTemplateLiteral","isAssignmentExpression","isForInStatement","left","isFunctionExpression","isFunctionDeclaration","isObjectMethod","isClassMethod","prevStatement","isIfStatement","isReturnStatement","slice","statement","isVariableDeclarator","isExportNamedDeclaration","declaration","isTryStatement","NODE_FIELDS","referenceEnums","program","traverse","ExpressionStatement","expressionStatement","expression","callee","args","arg","fixed","removeUnreferenced","items","Set","item","hasReferences","forDeleting","constantViolations","identifier","removeWithRelated","result","sort","a","b","localeCompare","applyAction","mutate","p","remove","replaceWith","paths","rootPath","getProgramParent","actions","affectedPaths","referencedIdentifiers","referencesOfBinding","reduce","acc","nonType","clean","join","fn","dereferenced","mutated","dead","assignments","assignment","declared","Object","values","getOuterBindingIdentifiers","Identifier","isArrayPattern","elements"],"sources":["../src/scopeHelpers.ts"],"sourcesContent":["/* eslint-disable no-restricted-syntax */\n/* eslint @typescript-eslint/no-use-before-define: [\"error\", { \"functions\": false }] */\n\nimport type { Binding, NodePath } from '@babel/traverse';\nimport type {\n  FieldOptions,\n  Function as FunctionNode,\n  Identifier,\n  JSXIdentifier,\n  Node,\n  Program,\n} from '@babel/types';\nimport { NODE_FIELDS } from '@babel/types';\n\nimport findIdentifiers, { nonType } from './findIdentifiers';\nimport { getScope } from './getScope';\nimport isNotNull from './isNotNull';\nimport isRemoved from './isRemoved';\n\nfunction validateField(\n  node: Node,\n  key: string,\n  val: unknown,\n  field: FieldOptions\n) {\n  if (!(field != null && field.validate)) return true;\n  if (field.optional && val == null) return true;\n  try {\n    field.validate(node, key, val);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction getBinding(path: NodePath<Identifier | JSXIdentifier>) {\n  const binding = getScope(path).getBinding(path.node.name);\n  if (!binding) {\n    return undefined;\n  }\n\n  return binding;\n}\n\nexport function reference(\n  path: NodePath<Identifier | JSXIdentifier>,\n  referencePath: NodePath = path,\n  force = false\n): void {\n  if (!force && !path.isReferencedIdentifier()) return;\n\n  const binding = getBinding(path);\n  if (!binding) return;\n\n  if (binding.referencePaths.includes(referencePath)) {\n    return;\n  }\n\n  binding.referenced = true;\n  binding.references += 1;\n  binding.referencePaths.push(referencePath ?? path);\n}\n\nfunction isReferenced(binding: Binding) {\n  if (!binding.referenced) {\n    return false;\n  }\n\n  // If it's a param binding, we can't just remove it\n  // because it brakes the function signature. Keep it alive for now.\n  if ((binding.kind as string) === 'param') {\n    return true;\n  }\n\n  // If all remaining references are in TS/Flow types, binding is unreferenced\n  return binding.referencePaths.some(\n    (i) => !i.find((ancestor) => ancestor.isTSType() || ancestor.isFlowType())\n  );\n}\n\nexport function dereference(\n  path: NodePath<Identifier | JSXIdentifier>\n): Binding | null {\n  const binding = getBinding(path);\n  if (!binding) return null;\n\n  if (!binding.referencePaths.includes(path)) {\n    return null;\n  }\n\n  binding.references -= 1;\n  binding.referencePaths = binding.referencePaths.filter((i) => i !== path);\n  binding.referenced = binding.referencePaths.length > 0;\n\n  return binding;\n}\n\nfunction dereferenceAll(path: NodePath): Binding[] {\n  return findIdentifiers([path])\n    .map((identifierPath) => dereference(identifierPath))\n    .filter(isNotNull);\n}\n\nexport function referenceAll(path: NodePath): void {\n  findIdentifiers([path]).forEach((identifierPath) =>\n    reference(identifierPath)\n  );\n}\n\nconst deletingNodes = new WeakSet<NodePath>();\n\nconst isEmptyList = (list: NodePath[]) =>\n  list.length === 0 || list.every((i) => deletingNodes.has(i));\n\ntype ReplaceAction = [action: 'replace', what: NodePath, by: Node];\ntype RemoveAction = [action: 'remove', what: NodePath];\n\nconst getPathFromAction = (action: RemoveAction | ReplaceAction) => {\n  if (!Array.isArray(action)) {\n    return action;\n  }\n\n  if (action[0] === 'replace' || action[0] === 'remove') {\n    return action[1];\n  }\n\n  throw new Error(`Unknown action type: ${action[0]}`);\n};\n\nfunction canFunctionBeDelete(fnPath: NodePath<FunctionNode>) {\n  const fnScope = fnPath.scope;\n  const parentScope = fnScope.parent;\n  if (parentScope.parent) {\n    // It isn't a top-level function, so we can't delete it\n    return true;\n  }\n\n  if (fnPath.listKey === 'arguments') {\n    // It is passed as an argument to another function, we can't delete it\n    return true;\n  }\n\n  return false;\n}\n\nexport function findActionForNode(\n  path: NodePath\n): RemoveAction | ReplaceAction | null {\n  if (isRemoved(path)) return null;\n\n  deletingNodes.add(path);\n\n  const parent = path.parentPath;\n\n  if (!parent) return ['remove', path];\n\n  if (parent.isProgram()) {\n    // Do not delete Program node\n    return ['remove', path];\n  }\n\n  if (parent.isFunction()) {\n    if (path.listKey === 'params') {\n      // Do not remove params of functions\n      return null;\n    }\n\n    if (\n      (path.isBlockStatement() && isEmptyList(path.get('body'))) ||\n      path === parent.get('body')\n    ) {\n      if (!canFunctionBeDelete(parent)) {\n        return [\n          'replace',\n          parent,\n          {\n            ...parent.node,\n            async: false,\n            body: {\n              type: 'BlockStatement',\n              body: [],\n              directives: [],\n            },\n            generator: false,\n            params: [],\n          },\n        ];\n      }\n    }\n  }\n\n  if (parent.isLogicalExpression({ operator: '&&' })) {\n    return [\n      'replace',\n      parent,\n      {\n        type: 'BooleanLiteral',\n        value: false,\n      },\n    ];\n  }\n\n  if (parent.isObjectProperty()) {\n    // let's check if it is a special case with Object.defineProperty\n    const key = parent.get('key');\n    if (key.isIdentifier({ name: 'get' })) {\n      const maybeDefineProperty = parent.parentPath.parentPath;\n      if (\n        maybeDefineProperty?.isCallExpression() &&\n        maybeDefineProperty\n          .get('callee')\n          .matchesPattern('Object.defineProperty')\n      ) {\n        return findActionForNode(maybeDefineProperty);\n      }\n    }\n\n    return findActionForNode(parent);\n  }\n\n  if (parent.isTemplateLiteral()) {\n    return [\n      'replace',\n      path,\n      {\n        type: 'StringLiteral',\n        value: '',\n      },\n    ];\n  }\n\n  if (parent.isAssignmentExpression()) {\n    return findActionForNode(parent);\n  }\n\n  if (parent.isCallExpression()) {\n    return findActionForNode(parent);\n  }\n\n  if (parent.isForInStatement({ left: path.node })) {\n    return findActionForNode(parent);\n  }\n\n  if (\n    parent.isFunctionExpression({ body: path.node }) ||\n    parent.isFunctionDeclaration() ||\n    parent.isObjectMethod() ||\n    parent.isClassMethod()\n  ) {\n    return findActionForNode(parent);\n  }\n\n  if (parent.isBlockStatement()) {\n    const body = parent.get('body');\n    if (isEmptyList(body)) {\n      return findActionForNode(parent);\n    }\n\n    if (path.listKey === 'body' && typeof path.key === 'number') {\n      if (path.key > 0) {\n        // We can check whether the previous one can be removed\n        const prevStatement = body[path.key - 1];\n        if (\n          prevStatement.isIfStatement() &&\n          prevStatement.get('consequent').isReturnStatement()\n        ) {\n          // It's `if (…) return …`, we can remove it.\n          return findActionForNode(prevStatement);\n        }\n      } else if (\n        body.slice(1).every((statement) => deletingNodes.has(statement))\n      ) {\n        // If it is the first statement and all other statements\n        // are marked for deletion, we can remove the whole block.\n        return findActionForNode(parent);\n      }\n    }\n  }\n\n  if (parent.isVariableDeclarator()) {\n    return findActionForNode(parent);\n  }\n\n  if (\n    parent.isExportNamedDeclaration() &&\n    ((path.key === 'specifiers' && isEmptyList(parent.get('specifiers'))) ||\n      (path.key === 'declaration' && parent.node.declaration === path.node))\n  ) {\n    return findActionForNode(parent);\n  }\n\n  for (const key of ['body', 'declarations', 'specifiers']) {\n    if (path.listKey === key && typeof path.key === 'number') {\n      const list = parent.get(key) as NodePath[];\n      if (isEmptyList(list)) {\n        return findActionForNode(parent);\n      }\n    }\n  }\n\n  if (parent.isTryStatement()) {\n    return findActionForNode(parent);\n  }\n\n  if (!path.listKey) {\n    const field = NODE_FIELDS[parent.type][path.key];\n    if (!validateField(parent.node, path.key as string, null, field)) {\n      // The parent node isn't valid without this field, so we should remove it also.\n      return findActionForNode(parent);\n    }\n  }\n\n  for (const key of [\n    'argument',\n    'block',\n    'body',\n    'callee',\n    'discriminant',\n    'expression',\n    'id',\n    'left',\n    'object',\n    'property',\n    'right',\n    'test',\n  ]) {\n    if (path.key === key && parent.get(key) === path) {\n      return findActionForNode(parent);\n    }\n  }\n\n  return ['remove', path];\n}\n\n// @babel/preset-typescript transpiles enums, but doesn't reference used identifiers.\nfunction referenceEnums(program: NodePath<Program>) {\n  /*\n   * We are looking for transpiled enums.\n   *   (function (Colors) {\n   *     Colors[\"BLUE\"] = \"#27509A\";\n   *   })(Colors || (Colors = {}));\n   */\n  program.traverse({\n    ExpressionStatement(expressionStatement) {\n      const expression = expressionStatement.get('expression');\n      if (!expression.isCallExpression()) return;\n\n      const callee = expression.get('callee');\n      const args = expression.get('arguments');\n      if (!callee.isFunctionExpression() || args.length !== 1) return;\n      const [arg] = args;\n      if (arg.isLogicalExpression({ operator: '||' })) {\n        referenceAll(arg);\n      }\n    },\n  });\n}\n\nconst fixed = new WeakSet<NodePath<Program>>();\n\nfunction removeUnreferenced(items: NodePath<Identifier | JSXIdentifier>[]) {\n  const referenced = new Set<NodePath<Identifier | JSXIdentifier>>();\n  items.forEach((item) => {\n    if (!item.node || isRemoved(item)) return;\n    const binding = getScope(item).getBinding(item.node.name);\n    if (!binding) return;\n    const hasReferences =\n      binding.referencePaths.filter((i) => !isRemoved(i)).length > 0;\n    if (hasReferences) {\n      referenced.add(item);\n      return;\n    }\n\n    const forDeleting = [binding.path, ...binding.constantViolations]\n      .map(findActionForNode)\n      .filter(isNotNull)\n      .map(getPathFromAction);\n\n    if (forDeleting.length === 0) return;\n\n    findIdentifiers(forDeleting).forEach((identifier) => {\n      referenced.add(identifier);\n    });\n\n    removeWithRelated(forDeleting);\n  });\n\n  const result = [...referenced];\n  result.sort((a, b) => a.node?.name.localeCompare(b.node?.name));\n\n  return result;\n}\n\nfunction applyAction(action: ReplaceAction | RemoveAction) {\n  mutate(action[1], (p) => {\n    if (isRemoved(p)) return;\n\n    if (action[0] === 'remove') {\n      p.remove();\n    }\n\n    if (action[0] === 'replace') {\n      p.replaceWith(action[2]);\n    }\n  });\n}\n\nfunction removeWithRelated(paths: NodePath[]) {\n  if (paths.length === 0) return;\n\n  const rootPath = getScope(paths[0]).getProgramParent()\n    .path as NodePath<Program>;\n\n  if (!fixed.has(rootPath)) {\n    // Some libraries don't care about bindings, references, and other staff\n    // So we have to fix the scope before we can detect unused code\n    referenceEnums(rootPath);\n    fixed.add(rootPath);\n  }\n\n  const actions: (ReplaceAction | RemoveAction)[] = paths\n    .map(findActionForNode)\n    .filter(isNotNull);\n\n  const affectedPaths = actions.map(getPathFromAction);\n\n  let referencedIdentifiers = findIdentifiers(affectedPaths, 'referenced');\n  referencedIdentifiers.sort((a, b) =>\n    a.node?.name.localeCompare(b.node?.name)\n  );\n\n  const referencesOfBinding = findIdentifiers(affectedPaths, 'binding')\n    .map((i) => (i.node && getScope(i).getBinding(i.node.name)) ?? null)\n    .filter(isNotNull)\n    .reduce(\n      (acc, i) => [...acc, ...i.referencePaths.filter(nonType)],\n      [] as NodePath[]\n    );\n\n  actions.forEach(applyAction);\n\n  removeWithRelated(referencesOfBinding);\n\n  let clean = false;\n  while (!clean && referencedIdentifiers.length > 0) {\n    const referenced = removeUnreferenced(referencedIdentifiers);\n    clean =\n      referenced.map((i) => i.node?.name).join('|') ===\n      referencedIdentifiers.map((i) => i.node?.name).join('|');\n    referencedIdentifiers = referenced;\n  }\n}\n\nfunction mutate<T extends NodePath>(path: T, fn: (p: T) => NodePath[] | void) {\n  const dereferenced = dereferenceAll(path);\n\n  const mutated = fn(path);\n\n  referenceAll(path);\n  mutated?.forEach((p) => referenceAll(p));\n\n  const dead = dereferenced.filter((p) => !isReferenced(p));\n\n  const forDeleting: NodePath[] = [];\n  dead.forEach((binding) => {\n    const assignments = [binding.path, ...binding.constantViolations];\n    assignments.forEach((assignment) => {\n      const { scope } = assignment;\n      const declared = Object.values(\n        assignment.getOuterBindingIdentifiers(false)\n      );\n      if (\n        declared.length === 1 &&\n        'name' in declared[0] &&\n        declared[0].name === binding.identifier.name\n      ) {\n        // Only one identifier is declared, so we can remove the whole declaration\n        forDeleting.push(assignment);\n        return;\n      }\n\n      if (\n        declared.every(\n          (identifier) =>\n            identifier.type === 'Identifier' &&\n            !scope.getBinding(identifier.name)?.referenced\n        )\n      ) {\n        // No other identifier is referenced, so we can remove the whole declaration\n        forDeleting.push(assignment);\n        return;\n      }\n\n      // We can't remove the binding, but we can remove the part of it\n      assignment.traverse({\n        Identifier(identifier) {\n          if (identifier.node.name === binding.identifier.name) {\n            const parent = identifier.parentPath;\n            if (\n              parent.isArrayPattern() &&\n              identifier.listKey === 'elements' &&\n              typeof identifier.key === 'number'\n            ) {\n              parent.node.elements[identifier.key] = null;\n            } else if (parent.isObjectProperty()) {\n              forDeleting.push(parent);\n            }\n          }\n        },\n      });\n    });\n  });\n\n  removeWithRelated(forDeleting);\n}\n\nexport { applyAction, mutate, removeWithRelated };\n"],"mappings":"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"}